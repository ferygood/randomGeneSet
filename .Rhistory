nrow(kznfs)
# use coefficient 0.3
df_kznfs_03 <- kznfs %>% filter(padj<0.001 & abs(coef)>=0.3)
# use coefficient 0.3
df_kznfs_03 <- kznfs %>%
filter(padj<0.001 & abs(coef)>=0.3) %>%
mutate(pair=paste0(teName, ":", geneName))
df_link_combine_03 <- df_kznfs_03 %>%
inner_join(df_enrich_filter[,c(2,3,6)],
join_by("pair"=="pair"))
head(df_link_combine_03)
head(df_link_combine)
df_link_combine_03_06 <- df_link_combine_03 %>%
mutate_if(pair %in% df_link_combine$pair, "coef06", "coef03")
?mutate_if
df_link_combine_03_06 <- df_link_combine_03 %>%
mutate(group = ifelse(pair %in% df_link_combine$pair, "coef06", "coef03"))
View(df_link_combine_03_06)
df_link_combine_03_06 <- df_link_combine_03 %>%
mutate(group = ifelse(pair %in% df_link_combine$pair, "coef06", "coef03")) %>%
mutate(direction = ifelse(coef >= 0, "positive", "negative"))
View(df_link_combine_03_06)
library(RCy3)
install.packages("RCy3")
BiocManager::install("RCy3")
library(RCy3)
head(df_link_combine_03_06)
n1.edge <- df_link_combine_03_06[,c(1,2,8,9,10)]
colnames(n1.edge) <- c("source", "target", "teFamily", "filter", "interaction")
createNetworkFromDataFrames(n1.node, n1.edge)
n1.node <- data.frame(
id=c(unique(df_link_combine_03_06$geneName),
unique(df_link_combine_03_06$teName)))
n1.edge <- df_link_combine_03_06[,c(1,2,8,9,10)]
colnames(n1.edge) <- c("source", "target", "teFamily", "filter", "interaction")
createNetworkFromDataFrames(n1.node, n1.edge)
length(unique(df_link_combine_03_06$geneName))
length(unique(df_link_combine_03_06$teName))
n2.node <- data.frame(
id=c(unique(df_link_combine$geneName),
unique(df_link_combine$teName)))
n2.edge <- df_link_combine[,c(1,2,8,9,10)]
head(df_link_combine_03_06)
df_only06 <- df_link_combine_03_06 %>%
filter(group=="coef06")
df_only06 <- df_link_combine_03_06 %>%
filter(group=="coef06")
n2.node <- data.frame(
id=c(unique(df_only06$geneName),
unique(df_only06$teName)))
n2.edge <- df_only06[,c(1,2,8,9,10)]
colnames(n2.edge) <- c("source", "target", "teFamily", "filter", "interaction")
createNetworkFromDataFrames(n2.node, n2.edge)
unique(df_only06$geneName)
n1.node.static <- read.csv("results_hm/coef0306_node_static.csv")
View(n1.node.static)
colnames(n1.node.static)
n1.node.static.filter <- n1.node.static %>%
select(c(5,7))
head(n1.node.static)
ggbarplot(n1.node.static.filter, x="id", y="Degree")
library(ggpubr)
ggbarplot(n1.node.static.filter, x="id", y="Degree")
n1.node.static.filter <- n1.node.static %>%
select(c(5,7)) %>%
filter(Degree >= 4)
ggbarplot(n1.node.static.filter, x="id", y="Degree")
ggbarplot(n1.node.static.filter, x="id", y="Degree") +
coord_flip()
n1.node.static.filter <- n1.node.static %>%
select(c(5,7)) %>%
filter(Degree >= 4 & id %in% unique(df_link_combine_03_06$geneName))
ggbarplot(n1.node.static.filter, x="id", y="Degree") +
coord_flip()
561/2296
561/97214
hm_gene
hmGene
load("primateBrainData.RData")
head(kznfs)
kznfs %>% filter(padj<0.001 & abs(coef)>0.6) %>% nrow()
kznfs %>% filter(padj<0.001 & abs(coef)>0.6) %>% head()
kznfs
kznfs %>% filter(padj<0.001) %>%nrow()
kznfs %>% filter(padj<0.001) %>% head()
setwd("~/github/randomGeneSet/correlation_scripts")
source("functions.R")
library(TEKRABber)
library(dplyr)
load("primateBrainData.RData")
# genes
df_pp_gene <- ppGene[,c(-1)]
rownames(df_pp_gene) <- ppGene$geneID
# transposable elements
ppTE_unique <- ppTE[!duplicated(ppTE$name), ]
ppTEexp <- ppTE_unique %>% select(-c(1,2,3))
rownames(ppTEexp) <- ppTE_unique$name
# genes covert to tpm
sample_counts <- colSums(df_pp_gene)
scaling_factor <- sample_counts / 1e6
df_pp_gene_tpm <- t(t(df_pp_gene)/ scaling_factor + 1) * 1e6
df_pp_gene_tpm <- as.data.frame(df_pp_gene_tpm)
# tes convert to tpm
te_counts <- colSums(ppTEexp)
te_scale <- te_counts / 1e6
ppTE_tpm <- t(t(ppTEexp)/ scaling_factor + 1) * 1e6
ppTE_tpm <- as.data.frame(ppTE_tpm)
# select cluster 1 and 2 IDs
cluster_meta <- read.csv("cluster_meta.csv")
c1_region <- cluster_meta %>%
filter(cluster=="cluster1") %>%
select(brain_region) %>%
unique()
c2_region <- cluster_meta %>%
filter(cluster=="cluster2") %>%
select(brain_region) %>%
unique()
c1_id <- metadata %>%
filter(Organism=="Pan paniscus" & brain_region %in% c1_region$brain_region) %>%
select(1)
c2_id <- metadata %>%
filter(Organism=="Pan paniscus" & brain_region %in% c2_region$brain_region) %>%
select(1)
# 1000 iteration
set.seed(47)
gene_list <- rownames(df_pp_gene_tpm)
selected_genes <- replicate(1000,
sample(gene_list, size=337, replace = FALSE),
simplify = FALSE)
for (i in 1:2){
gene <- df_pp_gene_tpm
te <- ppTE_tpm
gene_set <- selected_genes[[i]]
gene_c1 <- gene %>%
select(c1_id$Run) %>%
filter(rownames(.) %in% gene_set)
te_c1 <- te %>%
select(c1_id$Run)
gene_c2 <- gene %>%
select(c2_id$Run) %>%
filter(rownames(.) %in% gene_set)
te_c2 <- te %>%
select(c2_id$Run)
df_c1 <- corrOrthologTE(
geneInput = gene_c1,
teInput = te_c1,
numCore = 4
)
df_c2 <- corrOrthologTE(
geneInput = gene_c2,
teInput = te_c2,
numCore = 4
)
df_c1_sig <- df_c1 %>% filter(padj<0.01)
file_c1 <- paste0("results_c1_pp/gene_", i, "_vs_TE_corr.csv")
write.csv(df_c1_sig, file=file_c1, row.names = F)
df_c2_sig <- df_c2 %>% filter(padj<0.01)
file_c2 <- paste0("results_c2_pp/gene_", i, "_vs_TE_corr.csv")
write.csv(df_c2_sig, file=file_c2, row.names = F)
}
df_mm_gene <- mmGene[,c(-1)]
rownames(df_mm_gene) <- mmGene$geneID
# transposable elements
mmTE_unique <- mmTE[!duplicated(mmTE$name), ]
mmTEexp <- mmTE_unique %>% select(-c(1,2,3))
rownames(mmTEexp) <- mmTE_unique$name
# genes covert to tpm
sample_counts <- colSums(df_mm_gene)
scaling_factor <- sample_counts / 1e6
df_mm_gene_tpm <- t(t(df_mm_gene)/ scaling_factor + 1) * 1e6
df_mm_gene_tpm <- as.data.frame(df_mm_gene_tpm)
# tes convert to tpm
te_counts <- colSums(mmTEexp)
te_scale <- te_counts / 1e6
mmTE_tpm <- t(t(mmTEexp)/ scaling_factor + 1) * 1e6
mmTE_tpm <- as.data.frame(mmTE_tpm)
# select cluster 1 and 2 IDs
cluster_meta <- read.csv("cluster_meta.csv")
c1_region <- cluster_meta %>%
filter(cluster=="cluster1") %>%
select(brain_region) %>%
unique()
c2_region <- cluster_meta %>%
filter(cluster=="cluster2") %>%
select(brain_region) %>%
unique()
c1_id <- metadata %>%
filter(Organism=="Macaca mulatta" & brain_region %in% c1_region$brain_region) %>%
select(1)
c2_id <- metadata %>%
filter(Organism=="Macaca mulatta" & brain_region %in% c2_region$brain_region) %>%
select(1)
# 1000 iteration
set.seed(47)
gene_list <- rownames(df_mm_gene_tpm)
selected_genes <- replicate(1000,
sample(gene_list, size=337, replace = FALSE),
simplify = FALSE)
for (i in 1:2){
gene <- df_mm_gene_tpm
te <- mmTE_tpm
gene_set <- selected_genes[[i]]
gene_c1 <- gene %>%
select(c1_id$Run) %>%
filter(rownames(.) %in% gene_set)
te_c1 <- te %>%
select(c1_id$Run)
gene_c2 <- gene %>%
select(c2_id$Run) %>%
filter(rownames(.) %in% gene_set)
te_c2 <- te %>%
select(c2_id$Run)
df_c1 <- corrOrthologTE(
geneInput = gene_c1,
teInput = te_c1,
numCore = 4
)
df_c2 <- corrOrthologTE(
geneInput = gene_c2,
teInput = te_c2,
numCore = 4
)
df_c1_sig <- df_c1 %>% filter(padj<0.01)
file_c1 <- paste0("results_c1_mm/gene_", i, "_vs_TE_corr.csv")
write.csv(df_c1_sig, file=file_c1, row.names = F)
df_c2_sig <- df_c2 %>% filter(padj<0.01)
file_c2 <- paste0("results_c2_mm/gene_", i, "_vs_TE_corr.csv")
write.csv(df_c2_sig, file=file_c2, row.names = F)
}
load("primateBrainData.RData")
# genes
df_pt_gene <- ptGene[,c(-1)]
rownames(df_pt_gene) <- ptGene$geneID
# transposable elements
ptTEexp <- ptTE %>% select(-c(1,2,3))
rownames(ptTEexp) <- ptTE$name
# genes covert to tpm
sample_counts <- colSums(df_pt_gene)
scaling_factor <- sample_counts / 1e6
df_pt_gene_tpm <- t(t(df_pt_gene)/ scaling_factor + 1) * 1e6
df_pt_gene_tpm <- as.data.frame(df_pt_gene_tpm)
# tes convert to tpm
te_counts <- colSums(ptTEexp)
te_scale <- te_counts / 1e6
ptTE_tpm <- t(t(ptTEexp)/ scaling_factor + 1) * 1e6
ptTE_tpm <- as.data.frame(ptTE_tpm)
# select cluster 1 and 2 IDs
cluster_meta <- read.csv("cluster_meta.csv")
c1_region <- cluster_meta %>%
filter(cluster=="cluster1") %>%
select(brain_region) %>%
unique()
c2_region <- cluster_meta %>%
filter(cluster=="cluster2") %>%
select(brain_region) %>%
unique()
c1_id <- metadata %>%
filter(Organism=="Pan troglodytes" & brain_region %in% c1_region$brain_region) %>%
select(1)
c2_id <- metadata %>%
filter(Organism=="Pan troglodytes" & brain_region %in% c2_region$brain_region) %>%
select(1)
# 1000 iteration
set.seed(47)
gene_list <- rownames(df_pt_gene_tpm)
selected_genes <- replicate(1000,
sample(gene_list, size=337, replace = FALSE),
simplify = FALSE)
df_temp_c1 <- data.frame(
neg_count = as.numeric(),
pos_count = as.numeric()
)
df_temp_c2 <- data.frame(
neg_count = as.numeric(),
pos_count = as.numeric()
)
for (i in 1:2){
gene <- df_pt_gene_tpm
te <- ptTE_tpm
gene_set <- selected_genes[[i]]
gene_c1 <- gene %>%
select(c1_id$Run) %>%
filter(rownames(.) %in% gene_set)
te_c1 <- te %>%
select(c1_id$Run)
gene_c2 <- gene %>%
select(c2_id$Run) %>%
filter(rownames(.) %in% gene_set)
te_c2 <- te %>%
select(c2_id$Run)
df_c1 <- corrOrthologTE(
geneInput = gene_c1,
teInput = te_c1,
numCore = 5
)
df_c2 <- corrOrthologTE(
geneInput = gene_c2,
teInput = te_c2,
numCore = 5
)
df_c1_sig <- df_c1 %>% filter(padj<0.01)
c1_negCount <- df_c1_sig %>% filter(coef<0) %>% nrow()
c1_posCount <- df_c1_sig %>% filter(coef>0) %>% nrow()
file_c1 <- paste0("results_c1_pt/gene_", i, "_vs_TE_corr.csv")
write.csv(df_c1_sig, file=file_c1, row.names = F)
df_c2_sig <- df_c2 %>% filter(padj<0.01)
c2_negCount <- df_c2_sig %>% filter(coef<0) %>% nrow()
c2_posCount <- df_c2_sig %>% filter(coef>0) %>% nrow()
file_c2 <- paste0("results_c2_pt/gene_", i, "_vs_TE_corr.csv")
write.csv(df_c2_sig, file=file_c2, row.names = F)
c1_temp <- data.frame(
neg_count = c1_negCount,
pos_count = c1_posCount
)
df_temp_c1 <- rbind(df_temp_c1, c1_temp)
c2_temp <- data.frame(
neg_count = c2_negCount,
pos_count = c2_posCount
)
df_temp_c2 <- rbind(df_temp_c2, c2_temp)
}
df_pt_gene <- ptGene[,c(-1)]
rownames(df_pt_gene) <- ptGene$geneID
# transposable elements
ptTEexp <- ptTE %>% select(-c(1,2,3))
rownames(ptTEexp) <- ptTE$name
# genes covert to tpm
sample_counts <- colSums(df_pt_gene)
scaling_factor <- sample_counts / 1e6
df_pt_gene_tpm <- t(t(df_pt_gene)/ scaling_factor + 1) * 1e6
df_pt_gene_tpm <- as.data.frame(df_pt_gene_tpm)
# tes convert to tpm
te_counts <- colSums(ptTEexp)
te_scale <- te_counts / 1e6
ptTE_tpm <- t(t(ptTEexp)/ scaling_factor + 1) * 1e6
ptTE_tpm <- as.data.frame(ptTE_tpm)
# select cluster 1 and 2 IDs
cluster_meta <- read.csv("cluster_meta.csv")
c1_region <- cluster_meta %>%
filter(cluster=="cluster1") %>%
select(brain_region) %>%
unique()
c2_region <- cluster_meta %>%
filter(cluster=="cluster2") %>%
select(brain_region) %>%
unique()
c1_id <- metadata %>%
filter(Organism=="Pan troglodytes" & brain_region %in% c1_region$brain_region) %>%
select(1)
c2_id <- metadata %>%
filter(Organism=="Pan troglodytes" & brain_region %in% c2_region$brain_region) %>%
select(1)
# 1000 iteration
set.seed(47)
gene_list <- rownames(df_pt_gene_tpm)
selected_genes <- replicate(1000,
sample(gene_list, size=10, replace = FALSE),
simplify = FALSE)
df_temp_c1 <- data.frame(
neg_count = as.numeric(),
pos_count = as.numeric()
)
df_temp_c2 <- data.frame(
neg_count = as.numeric(),
pos_count = as.numeric()
)
for (i in 1:2){
gene <- df_pt_gene_tpm
te <- ptTE_tpm
gene_set <- selected_genes[[i]]
gene_c1 <- gene %>%
select(c1_id$Run) %>%
filter(rownames(.) %in% gene_set)
te_c1 <- te %>%
select(c1_id$Run)
gene_c2 <- gene %>%
select(c2_id$Run) %>%
filter(rownames(.) %in% gene_set)
te_c2 <- te %>%
select(c2_id$Run)
df_c1 <- corrOrthologTE(
geneInput = gene_c1,
teInput = te_c1,
numCore = 5
)
df_c2 <- corrOrthologTE(
geneInput = gene_c2,
teInput = te_c2,
numCore = 5
)
df_c1_sig <- df_c1 %>% filter(padj<0.01)
c1_negCount <- df_c1_sig %>% filter(coef<0) %>% nrow()
c1_posCount <- df_c1_sig %>% filter(coef>0) %>% nrow()
file_c1 <- paste0("results_c1_pt/gene_", i, "_vs_TE_corr.csv")
write.csv(df_c1_sig, file=file_c1, row.names = F)
df_c2_sig <- df_c2 %>% filter(padj<0.01)
c2_negCount <- df_c2_sig %>% filter(coef<0) %>% nrow()
c2_posCount <- df_c2_sig %>% filter(coef>0) %>% nrow()
file_c2 <- paste0("results_c2_pt/gene_", i, "_vs_TE_corr.csv")
write.csv(df_c2_sig, file=file_c2, row.names = F)
c1_temp <- data.frame(
neg_count = c1_negCount,
pos_count = c1_posCount
)
df_temp_c1 <- rbind(df_temp_c1, c1_temp)
c2_temp <- data.frame(
neg_count = c2_negCount,
pos_count = c2_posCount
)
df_temp_c2 <- rbind(df_temp_c2, c2_temp)
}
write.csv(df_temp_c1, file="pt_c1_result.csv", row.names=1)
write.csv(df_temp_c1, file="pt_c1_result.csv", row.names=F)
write.csv(df_temp_c2, file="pt_c2_result.csv", row.names=F)
df_pt_gene <- ptGene[,c(-1)]
rownames(df_pt_gene) <- ptGene$geneID
# transposable elements
ptTEexp <- ptTE %>% select(-c(1,2,3))
rownames(ptTEexp) <- ptTE$name
# genes covert to tpm
sample_counts <- colSums(df_pt_gene)
scaling_factor <- sample_counts / 1e6
df_pt_gene_tpm <- t(t(df_pt_gene)/ scaling_factor + 1) * 1e6
df_pt_gene_tpm <- as.data.frame(df_pt_gene_tpm)
# tes convert to tpm
te_counts <- colSums(ptTEexp)
te_scale <- te_counts / 1e6
ptTE_tpm <- t(t(ptTEexp)/ scaling_factor + 1) * 1e6
ptTE_tpm <- as.data.frame(ptTE_tpm)
# select cluster 1 and 2 IDs
cluster_meta <- read.csv("cluster_meta.csv")
c1_region <- cluster_meta %>%
filter(cluster=="cluster1") %>%
select(brain_region) %>%
unique()
c2_region <- cluster_meta %>%
filter(cluster=="cluster2") %>%
select(brain_region) %>%
unique()
c1_id <- metadata %>%
filter(Organism=="Pan troglodytes" & brain_region %in% c1_region$brain_region) %>%
select(1)
c2_id <- metadata %>%
filter(Organism=="Pan troglodytes" & brain_region %in% c2_region$brain_region) %>%
select(1)
# 1000 iteration
set.seed(47)
gene_list <- rownames(df_pt_gene_tpm)
selected_genes <- replicate(1000,
sample(gene_list, size=10, replace = FALSE),
simplify = FALSE)
df_temp_c1 <- data.frame(
neg_count = as.numeric(),
pos_count = as.numeric()
)
df_temp_c2 <- data.frame(
neg_count = as.numeric(),
pos_count = as.numeric()
)
for (i in 1:2){
gene <- df_pt_gene_tpm
te <- ptTE_tpm
gene_set <- selected_genes[[i]]
gene_c1 <- gene %>%
select(c1_id$Run) %>%
filter(rownames(.) %in% gene_set)
te_c1 <- te %>%
select(c1_id$Run)
gene_c2 <- gene %>%
select(c2_id$Run) %>%
filter(rownames(.) %in% gene_set)
te_c2 <- te %>%
select(c2_id$Run)
df_c1 <- corrOrthologTE(
geneInput = gene_c1,
teInput = te_c1,
numCore = 5
)
df_c2 <- corrOrthologTE(
geneInput = gene_c2,
teInput = te_c2,
numCore = 5
)
df_c1_sig <- df_c1 %>% filter(padj<0.01)
c1_negCount <- df_c1_sig %>% filter(coef<0) %>% nrow()
c1_posCount <- df_c1_sig %>% filter(coef>0) %>% nrow()
file_c1 <- paste0("results_c1_pt/gene_", i, "_vs_TE_corr.csv")
write.csv(df_c1_sig, file=file_c1, row.names = F)
df_c2_sig <- df_c2 %>% filter(padj<0.01)
c2_negCount <- df_c2_sig %>% filter(coef<0) %>% nrow()
c2_posCount <- df_c2_sig %>% filter(coef>0) %>% nrow()
file_c2 <- paste0("results_c2_pt/gene_", i, "_vs_TE_corr.csv")
write.csv(df_c2_sig, file=file_c2, row.names = F)
c1_temp <- data.frame(
neg_count = c1_negCount,
pos_count = c1_posCount
)
df_temp_c1 <- rbind(df_temp_c1, c1_temp)
c2_temp <- data.frame(
neg_count = c2_negCount,
pos_count = c2_posCount
)
df_temp_c2 <- rbind(df_temp_c2, c2_temp)
}
write.csv(df_temp_c1, file="pt_c1_result.csv", row.names=F)
write.csv(df_temp_c2, file="pt_c2_result.csv", row.names=F)
unique(metadata$Organism)
library(TEKRABber)
?corrOrthologTE
detectCores()
?detectCores()
parallel::detectCores()
