# Compare correlation

Compare random genes to transposable elements in human

![](results_hm/gToTE_seed47_iter100.jpg)

```{r}
library(dplyr)

kznfs <- read.csv("results_hm/kznfs_vs_TE_corr.csv")

csv_files <- list.files(path="results_hm", pattern = "^gene_.*\\.csv$")

for (file in csv_files) {
    
    prefix <- gsub("^gene_(.*?)\\.csv$", "\\1", file)
    
    assign(paste0("gene_", prefix), read.csv(file.path('results_hm', file)))
}


kznfs %>% filter(padj<0.001) %>% nrow()
```

```{r}
library(ggplot2)
library(dplyr)

df_1_sig <- gene_12_vs_TE_corr %>%
    filter(padj<0.01) %>%
    mutate(class="gene")

df_kznfs_sig <- kznfs %>%
    filter(padj<0.01) %>%
    mutate(class="kznfs")

combine_df <- rbind(df_1_sig, df_kznfs_sig)

ggplot(combine_df, aes(x=coef, color=class)) +
    geom_histogram(fill="white", position="dodge") +
    facet_wrap(~class) +
    theme_bw()
```

```{r}
df_1_sig <- gene_1_vs_TE_corr %>%
    filter(padj<0.001 & abs(coef)>0.5) %>%
    mutate(class="gene")

df_kznfs_sig <- kznfs %>%
    filter(padj<0.001 & abs(coef)>0.5) %>%
    mutate(class="kznfs")

combine_df <- rbind(df_1_sig, df_kznfs_sig)

ggplot(combine_df, aes(x=coef, color=class)) +
    geom_histogram(fill="white", position="dodge") +
    facet_wrap(~class) +
    theme_bw()
```

```{r}
get_link <- function(padj_v=0.001){
    
    df_link <- data.frame(matrix(ncol=3, nrow=0))
        colnames(df_link) <- c("KZNF_link", "coef" ,"pvalue")
    
    for (coef_v in seq(0.3, 1, by=0.05)){
        
        link_count <- c()
        
        df_kznf_sig_temp <- kznfs %>%
            filter(padj<padj_v & abs(coef) >= coef_v)
        
        for (i in 1:100){
            
            df_name <- paste0("gene_", i, "_vs_TE_corr")
            
            df_temp <- get(df_name)
            df_temp_sig <- df_temp %>%
                filter(padj<padj_v & abs(coef) >= coef_v)
            
            link_count <- c(link_count, nrow(df_temp_sig))
            
        }
        
        more_link <- sum(nrow(df_kznf_sig_temp) < link_count) / 100
        
        
        df_link <- rbind(
            data.frame(KZNF_link=nrow(df_kznf_sig_temp),
                       coef=coef_v,
                       pvalue=more_link), 
            df_link)
    }

    df_link
}
```

```{r}
get_neg_link <- function(padj_v=0.001){
    
    df_link <- data.frame(matrix(ncol=3, nrow=0))
        colnames(df_link) <- c("KZNF_link", "coef" ,"pvalue")
    
    for (coef_v in seq(-1, -0.3, by=0.05)){
        
        link_count <- c()
        
        df_kznf_sig_temp <- kznfs %>%
            filter(padj<padj_v & coef <= coef_v)
        
        for (i in 1:100){
            
            df_name <- paste0("gene_", i, "_vs_TE_corr")
            
            df_temp <- get(df_name)
            df_temp_sig <- df_temp %>%
                filter(padj<padj_v & coef <= coef_v)
            
            link_count <- c(link_count, nrow(df_temp_sig))
            
        }
        
        more_link <- sum(nrow(df_kznf_sig_temp) < link_count) / 100
        
        
        df_link <- rbind(
            data.frame(KZNF_link=nrow(df_kznf_sig_temp),
                       coef=coef_v,
                       pvalue=more_link), 
            df_link)
    }

    df_link
}
```

```{r}
get_pos_link <- function(padj_v=0.001){
    
    df_link <- data.frame(matrix(ncol=3, nrow=0))
        colnames(df_link) <- c("KZNF_link", "coef" ,"pvalue")
    
    for (coef_v in seq(0.3, 1, by=0.05)){
        
        link_count <- c()
        
        df_kznf_sig_temp <- kznfs %>%
            filter(padj<padj_v & coef >= coef_v)
        
        for (i in 1:100){
            
            df_name <- paste0("gene_", i, "_vs_TE_corr")
            
            df_temp <- get(df_name)
            df_temp_sig <- df_temp %>%
                filter(padj<padj_v & coef >= coef_v)
            
            link_count <- c(link_count, nrow(df_temp_sig))
            
        }
        
        more_link <- sum(nrow(df_kznf_sig_temp) < link_count) / 100
        
        
        df_link <- rbind(
            data.frame(KZNF_link=nrow(df_kznf_sig_temp),
                       coef=coef_v,
                       pvalue=more_link), 
            df_link)
    }

    df_link
}
```

```{r}
df_bothSide <- get_link()
df_negSide <- get_neg_link()
df_posSide <- get_pos_link()

df_bothSide$link <- "both"
df_negSide$link <- "negative"
df_posSide$link <- "positive"

df_hm_combine <- rbind(df_bothSide, df_negSide, df_posSide)
```

```{r}
df_hm_combine$pvalue_color <- cut(df_hm_combine$pvalue, breaks = c(-Inf, 0.05, Inf), labels=c("sig", "nosig"))

# seed 47, iterations 100

random_hm <- ggplot(df_hm_combine, aes(x=coef, y=KZNF_link/1000, color=pvalue_color)) +
    geom_point() +
    scale_color_manual(values=c(sig="red", nosig="black"))+
    scale_x_continuous(breaks=seq(min(df_hm_combine$coef), max(df_hm_combine$coef), by=0.1)) +
    scale_y_continuous(breaks=seq(0, 100, by=10)) +
    facet_wrap(~link,nrow = 2) +
    theme_bw()

ggsave(random_hm, file="results_hm/gToTE_seed47_iter100.jpg", dpi=200, width = 12, height = 5)
```

Conclusion, we can consider using absolute coefficient larger than 0.6, then we will have 11029 TE:KRAB-ZNF including 10606 positive links and 423 negative links.

Do we want more iteration? 1000?

```{r}
df_kznf_select <- kznfs %>%
    filter(padj<0.001, abs(coef)>=0.6)
#170 KZNFs and 570 TEs

kznf_count <- df_kznf_select %>%
    count(geneName, name = "link") 

chipexo_enrich <- readxl::read_xlsx("ChIP_Exo_Tables/ChIP_exo_enriched.xlsx")
df_chip <- as.data.frame(t(chipexo_enrich[,2:223]))
rownames(df_chip) <- colnames(chipexo_enrich)[2:223]
colnames(df_chip) <- chipexo_enrich$...1
df_chip$geneName <- rownames(df_chip)



# combine
kznf_chip <- kznf_count %>%
    inner_join(df_chip[,c(3:8,10)], by=c("geneName" = "geneName"))

kznf_chip_scale <- cbind(kznfs=kznf_chip[,1], 
                         as.data.frame(scale(kznf_chip[,c(2:8)])))

corr_result <- cor.test(kznf_chip_scale$link, kznf_chip_scale$`Transposable elements`)

# Create the plot
p <- ggplot(kznf_chip_scale, aes(x=link, y=`Transposable elements`)) +
    geom_point(fill="#7ed2bb", color="#051453") +
    geom_text(x = 3, y = -1.5, label = 
                  paste("Coefficient:", round(corr_result$estimate, 2), "\n", 
                        "p-value:", 
                        format(corr_result$p.value, scientific=TRUE, digits=1)),
              hjust = 1, vjust = 0, color = "red") +
    xlab("normalized number of TE:KRAB-ZNF") +
    ylab("normalized percentage of ChIP-exo overlapped with TE regions") +
    theme_bw()

ggsave(p, file="results_hm/ourLink_percentageChIPexo_allTE.jpg", 
       width = 5, height = 5, dpi=200)

```

Let's try with negative correlation

```{r}
kznf_count_neg <- df_kznf_select %>%
    filter(coef<0) %>%
    count(geneName, name = "link") 

# combine
kznf_chip_neg <- kznf_count_neg %>%
    inner_join(df_chip[,c(3:8,10)], by=c("geneName" = "geneName"))

kznf_chip_scale_neg <- cbind(kznfs=kznf_chip_neg[,1], 
                         as.data.frame(scale(kznf_chip_neg[,c(2:8)])))

corr_result <- cor.test(kznf_chip_scale_neg$link, kznf_chip_scale_neg$`Transposable elements`)

# Create the plot
p_neg <- ggplot(kznf_chip_scale_neg, aes(x=link, y=`Transposable elements`)) +
    geom_point(fill="#7ed2bb", color="#051453") +
    geom_text(x = 3, y = -1.5, label = 
                  paste("Coefficient:", round(corr_result$estimate, 2), "\n", 
                        "p-value:", 
                        format(corr_result$p.value, scientific=TRUE, digits=1)),
              hjust = 1, vjust = 0, color = "red") +
    xlab("normalized number of TE:KRAB-ZNF") +
    ylab("normalized percentage of ChIP-exo overlapped with TE regions") +
    ggtitle("Negative TE:KRAB-ZNF") +
    theme_bw()

ggsave(p_neg, file="results_hm/ourNegLink_percentageChIPexo_allTE.jpg", 
       width = 5, height = 5, dpi=200)

```

with positive

```{r}
kznf_count_pos <- df_kznf_select %>%
    filter(coef>0) %>%
    count(geneName, name = "link") 

# combine
kznf_chip_pos <- kznf_count_pos %>%
    inner_join(df_chip[,c(3:8,10)], by=c("geneName" = "geneName"))

kznf_chip_scale_pos <- cbind(kznfs=kznf_chip_pos[,1], 
                         as.data.frame(scale(kznf_chip_pos[,c(2:8)])))

corr_result <- cor.test(kznf_chip_scale_pos$link, kznf_chip_scale_pos$`Transposable elements`)

# Create the plot
p_pos <- ggplot(kznf_chip_scale_pos, aes(x=link, y=`Transposable elements`)) +
    geom_point(fill="#7ed2bb", color="#051453") +
    geom_text(x = 3, y = -1.5, label = 
                  paste("Coefficient:", round(corr_result$estimate, 2), "\n", 
                        "p-value:", 
                        format(corr_result$p.value, scientific=TRUE, digits=1)),
              hjust = 1, vjust = 0, color = "red") +
    xlab("normalized number of TE:KRAB-ZNF") +
    ylab("normalized percentage of ChIP-exo overlapped with TE regions") +
    ggtitle("Positive TE:KRAB-ZNF") +
    theme_bw()

ggsave(p_pos, file="results_hm/ourPosLink_percentageChIPexo_allTE.jpg", 
       width = 5, height = 5, dpi=200)
```

```{r}
# to see percentage overlapped with different class of TE
library(twice)
library(stringr)
data("hg19rmsk_info")

# LINE
df_kznf_select_line <- df_kznf_select %>%
    filter(teName %in% hg19rmsk_info[hg19rmsk_info$class_id=="LINE", ]$gene_id)

# ERV
erv_list <- hg19rmsk_info %>%
    filter(str_detect(family_id, "^ERV"))

df_kznf_select_erv <- df_kznf_select %>%
    filter(teName %in% erv_list$gene_id)

# SINE
df_kznf_select_sine <- df_kznf_select %>%
    filter(teName %in% hg19rmsk_info[hg19rmsk_info$class_id=="SINE", ]$gene_id)

# DNA
df_kznf_select_dna <- df_kznf_select %>%
    filter(teName %in% hg19rmsk_info[hg19rmsk_info$class_id=="DNA", ]$gene_id)

#SVA
df_kznf_select_sva <- df_kznf_select %>%
    filter(teName %in% hg19rmsk_info[hg19rmsk_info$class_id=="SVA", ]$gene_id)
```

Then we can filter the data based on the name list

```{r}
# for line
kznf_chip_scale_line <- kznf_chip_scale %>%
    filter(kznfs %in% df_kznf_select_line$geneName)

corr_result <- cor.test(kznf_chip_scale_line$link, kznf_chip_scale_line$LINE)

# Create the plot
p_line <- ggplot(kznf_chip_scale_line, aes(x=link, y=LINE)) +
    geom_point(fill="#7ed2bb", color="#051453") +
    geom_text(x = 3, y = -1.5, label = 
                  paste("Coefficient:", round(corr_result$estimate, 2), "\n", 
                        "p-value:", 
                        format(corr_result$p.value, scientific=TRUE, digits=1)),
              hjust = 1, vjust = 0, color = "red") +
    xlab("normalized number of TE:KRAB-ZNF") +
    ylab("normalized percentage of ChIP-exo overlapped with LINE") +
    theme_bw()

ggsave(p, file="results_hm/ourLink_percentageChIPexo_allTE.jpg", 
       width = 5, height = 5, dpi=200)
```

Overlapped match the enrichment of KZFPs within precise transposable element subfamilies. The score is -log 10 of the pvalue and the maximum achievable is 320 which means that value above 1.30103 is significant

```{r}
# Read the Excel file
df_enrich <- readxl::read_xlsx("ChIP_Exo_Tables/kznfs_TEs_ChIP_exo.xlsx")

# Convert the tibble to a data.frame
df_enrich <- as.data.frame(df_enrich)

# Set row names
rownames(df_enrich) <- df_enrich$...1

# Select all columns except the first one
df_enrich_sig <- df_enrich[, -1]

# Create an empty data frame
df_enrich_filter <- data.frame(geneName = character(), teName = character(), pval = numeric())

# Loop through every value in df_enrich_sig
for (i in 1:nrow(df_enrich_sig)) {
  for (j in 1:ncol(df_enrich_sig)) {
    # Check if the value is larger than 1.30103
    if (df_enrich_sig[i, j] > 1.30103) {
      # If it is, rbind this information to the dataframe
      df_enrich_filter <- rbind(
          df_enrich_filter, 
          data.frame(geneName = rownames(df_enrich_sig)[i], 
                     teName = colnames(df_enrich_sig)[j], 
                     pval = df_enrich_sig[i, j]))
    }
  }
}

library(tidyr)

df_enrich_filter <- df_enrich_filter %>%
  separate(teName, c("teClass", "teFamily", "teName"), sep = "/")
df_enrich_filter[1058, "teName"] <- "MamRep605"
df_enrich_filter[1059, "teName"] <- "MamRep605b"

df_enrich_filter <- df_enrich_filter %>%
    mutate(pair=paste0(teName, ":", geneName)) #2296

df_kznf_select <- df_kznf_select %>%
    mutate(pair=paste0(teName, ":", geneName)) #11029


df_link_combine <- df_kznf_select %>%
    inner_join(df_enrich_filter[,c(2,3,6)], 
               join_by("pair"=="pair")) # only 50 overlapped

write.csv(df_link_combine, file="coef06_overlap50.csv", row.names=F)
```

short summary:

we have 50 overlapped with ChIP-exo data based on this criteria (padj\<0.001, abs(coef) \> 0.6). There are 20 unique KRAB-ZNFs and 40 TEs.

```{r}
# use coefficient 0.3
df_kznfs_03 <- kznfs %>% 
    filter(padj<0.001 & abs(coef)>=0.3) %>%
    mutate(pair=paste0(teName, ":", geneName))

df_link_combine_03 <- df_kznfs_03 %>%
    inner_join(df_enrich_filter[,c(2,3,6)],
               join_by("pair"=="pair"))

df_link_combine_03_06 <- df_link_combine_03 %>%
    mutate(group = ifelse(pair %in% df_link_combine$pair, "coef06", "coef03")) %>%
    mutate(direction = ifelse(coef >= 0, "positive", "negative"))
```

There are in total 561 links using coefficient 0.3 including 50 of them has coefficient 0.6

Then, we convert this result to a dataframe that can be visualize using cytoscape.

```{r}
library(RCy3)
n1.node <- data.frame(
    id=c(unique(df_link_combine_03_06$geneName), 
         unique(df_link_combine_03_06$teName)))

n1.edge <- df_link_combine_03_06[,c(1,2,8,9,10)]
colnames(n1.edge) <- c("source", "target", "teFamily", "filter", "interaction")

createNetworkFromDataFrames(n1.node, n1.edge)

n1.node.static <- read.csv("results_hm/coef0306_node_static.csv")
n1.node.static.filter <- n1.node.static %>%
    select(c(5,7)) %>%
    filter(Degree >= 4 & id %in% unique(df_link_combine_03_06$geneName))

library(ggpubr)
ggbarplot(n1.node.static.filter, x="id", y="Degree") +
    coord_flip()

```

```{r}
df_only06 <- df_link_combine_03_06 %>%
    filter(group=="coef06")

n2.node <- data.frame(
    id=c(unique(df_only06$geneName), 
         unique(df_only06$teName)))

n2.edge <- df_only06[,c(1,2,8,9,10)]
colnames(n2.edge) <- c("source", "target", "teFamily", "filter", "interaction")

createNetworkFromDataFrames(n2.node, n2.edge)
```
